#!/usr/bin/env python2
# Copyright (c) 2010 Pablo Seminario <pabluk@gmail.com>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import logging
from optparse import OptionParser
import pygtk
pygtk.require('2.0')
import gtk
import gettext
import locale
import threading

locale.setlocale(locale.LC_ALL, '')
gettext.install('screenkey', unicode=True)

from Screenkey import APP_NAME, APP_DESC, VERSION
from Screenkey.screenkey import Screenkey
from Screenkey.listenkbd import ListenKbd_Logger, MODE_NORMAL


def main():
    parser = OptionParser(description=APP_DESC, version=VERSION)
    parser.add_option(
        "--no-detach", action="store_true",
        dest="nodetach", default=False,
        help=_("do not detach from the parent"))
    parser.add_option(
        "-d", "--debug", action="store_true",
        dest="debug", default=False, help=_("show debug information"))
    parser.add_option(
        "-n", "--no-hide", action="store_true",
        dest="nohide", default=False, help=_("do not hide"))
    parser.add_option(
        "--bg", action="store",
        dest="bg", default="black",
        help=_("background color (in #RRGGBB format)"))
    parser.add_option(
        "--fg", action="store",
        dest="fg", default="white", help=_("foreground color"))
    parser.add_option(
        "--no-sudo", action="store_true",
        dest="nosudo", default=True,
        help=_("do not perform very expensive sudo running check"))
    parser.add_option(
        "-w", "--window",
        dest="window_id", default=0, help=_("align to other window"))
    parser.add_option(
        "--key-logger", action="store_true",
        default=False, help=_("keylogger mode: windowless, print to stdout"))
    parser.add_option(
        "-t", "--timeout", action="store",
        dest="timeout", default=3600.0, help=_("how long the display window stays visible"))
    parser.add_option(
        "-f", "--font", action="store",
        dest="font", default="Deja Vu Sans Mono", help=_("typeface for display"))
    parser.add_option(
        "-s", "--size", action="store",
        dest="fontsize", default=20, help=_("size of typeface"))

    (options, args) = parser.parse_args()

    if options.debug:
        if options.nodetach:
            # Send debug messages to standard output
            logfile = None
        else:
            logfile = os.path.join(os.path.expanduser('~'),
                                   '.screenkey.log')
            username = os.environ.get('SUDO_USER')
            if username:
                homedir = os.path.expanduser('~%s' % username)
                if homedir != '~%s' % username:
                    logfile = os.path.join(homedir, '.screenkey.log')
        logging.basicConfig(filename=logfile, level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(APP_NAME)

    gtk.gdk.threads_init()

    if options.key_logger:
        listenkbd = ListenKbd_Logger(logger=logger,
                                   mode=MODE_NORMAL,
                                   nosudo=options.nosudo)
        listenkbd.start()
    else:
        Screenkey(
            logger=logger,
            nodetach=options.nodetach,
            nohide=options.nohide,
            bg=options.bg, fg=options.fg,
            nosudo=options.nosudo,
            window_id=options.window_id,
            timeout=options.timeout,
            font=options.font,
            fontsize=options.fontsize)
        try:
            gtk.main()
        finally:
            # listenkbd thread do not terminate due to bug in Xlib implementation
            if threading.active_count() > 1:
                os.system('kill %d' % (os.getpid()))

if __name__ == "__main__":
    main()
